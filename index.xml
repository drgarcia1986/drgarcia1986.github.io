<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reinventing The Wheel</title>
    <link>/</link>
    <description>Recent content on Reinventing The Wheel</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Tue, 01 Jun 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    
    <item>
      <title>Changelogger</title>
      <link>/changelogger/</link>
      <pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>/changelogger/</guid>
      <description>I started a project called changelogger. This project is a very simplified version of Towncrier but written in Go.
I can already hear you say: Why?. Well, Golang isn&amp;rsquo;t the main goal here, but the fact that I can distribute this tool as a binary without care about the developer environment. There&amp;rsquo;s no problem with Python (to tell the truth, Python has been paying my bills for ten years) but, I wouldn&amp;rsquo;t like to force a Golang/JavaScript/Java/[put here your favorite lang] dev to setup a python environment only to use a simple tool.</description>
    </item>
    
    
    
    <item>
      <title>Programming Kubernetes - Running Pods</title>
      <link>/programming-kubernetes-running-pods/</link>
      <pubDate>Sat, 15 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/programming-kubernetes-running-pods/</guid>
      <description>This is the first post of a series I want to publish about interact with the Kubernetes programmatic instead of using kubectl for example. In this first post, we&amp;rsquo;ll create an API that runs an individual pod and returns the exit code with the stdout of the execution, something like that:
$ curl -i -d \ &#39;{&amp;quot;image&amp;quot;: &amp;quot;python:3.7.0&amp;quot;, &amp;quot;command&amp;quot;: &amp;quot;python&amp;quot;,\ &amp;quot;args&amp;quot;: [&amp;quot;-c&amp;quot;, &amp;quot;print(\&amp;quot;Hello World\&amp;quot;)&amp;quot;]}&#39;\ http://api-endpoint/ HTTP/1.1 200 OK Content-Length: 41 Content-Type: application/json; charset=utf-8 {&amp;quot;exit_code&amp;quot;: 0, &amp;quot;output&amp;quot;: &amp;quot;Hello World\n&amp;quot;} Explaining the request payload:</description>
    </item>
    
    
    
    <item>
      <title>Playing with Go and Generics</title>
      <link>/playing-with-go-and-generics/</link>
      <pubDate>Wed, 07 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>/playing-with-go-and-generics/</guid>
      <description>Yes, it&amp;rsquo;s happening! The proposal to add generics to Golang was accepted. It means that in some versions in the future, we&amp;rsquo;ll be able to code generic solutions without having to use complex workarounds with the empty interface{}. But, how it works?
TLDR: Now there&amp;rsquo;s a type parameter described with square brackets to define generics types for structs, functions, etc. For instance:
func Print[T any](s []T) { for _, v := range s { fmt.</description>
    </item>
    
    
    
    <item>
      <title>Building a Personal Activity Tracker</title>
      <link>/building-a-personal-activity-tracker/</link>
      <pubDate>Sun, 04 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>/building-a-personal-activity-tracker/</guid>
      <description>Disclaimer: This project/post is inspired on Building an activity tracker with Go, Grafana, and InfluxDB by lucapette, so there&amp;rsquo;re many common points and strategies.
 If you&amp;rsquo;re reading this in 2021 you&amp;rsquo;re living the Coronavirus Pandemic Era and you&amp;rsquo;re most likely working from home. Well, I&amp;rsquo;m working from home too with my fiance and my daughter (and two cats). I&amp;rsquo;m a software engineer who works in a big retail company and this kind of job is very intense.</description>
    </item>
    
    
    
    
  </channel>
</rss>
